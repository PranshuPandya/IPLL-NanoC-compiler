Starting parse
Entering state 0
Stack now 0
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 5
Stack now 0 5
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 5 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 5 13 20
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 63
Stack now 0 5 13 20 63
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 5 13 20 63 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 92
Stack now 0 5 13 20 63 92
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 122
Stack now 0 5 13 20 63 92 122
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 131
Stack now 0 5 13 20 63 92 122 131
Reducing stack by rule 88 (line 261):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_opt ()
Entering state 132
Stack now 0 5 13 20 63 92 122 132
Reducing stack by rule 64 (line 193):
   $1 = nterm type_specifier ()
   $2 = nterm pointer_opt ()
   $3 = nterm identifier_opt ()
-> $$ = nterm parameter_declaration ()
Entering state 95
Stack now 0 5 13 20 63 95
Reducing stack by rule 60 (line 183):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Entering state 93
Stack now 0 5 13 20 63 93
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 62 (line 188):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_list_opt ()
Entering state 94
Stack now 0 5 13 20 63 94
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 124
Stack now 0 5 13 20 63 94 124
Reducing stack by rule 56 (line 170):
   $1 = token IDENTIFIER ()
   $2 = token RDBLT ()
   $3 = nterm parameter_list_opt ()
   $4 = token RDBRT ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 5 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 11
Stack now 0 5 11
Reading a token
Next token is token CRBLT ()
Shifting token CRBLT ()
Entering state 17
Stack now 0 5 11 17
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 23
Stack now 0 5 11 17 23
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 65
Stack now 0 5 11 17 23 65
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 5 11 17 23 65 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 5 11 17 23 65 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 36
Reading a token
Next token is token EQUALTO ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 5 11 17 23 65 37
Next token is token EQUALTO ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 5 11 17 23 65 39
Next token is token EQUALTO ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 5 11 17 23 65 40
Next token is token EQUALTO ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 5 11 17 23 65 41
Next token is token EQUALTO ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 5 11 17 23 65 42
Next token is token EQUALTO ()
Shifting token EQUALTO ()
Entering state 82
Stack now 0 5 11 17 23 65 42 82
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 5 11 17 23 65 42 82 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 5 11 17 23 65 42 82 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 42 82 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 5 11 17 23 65 42 82 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 5 11 17 23 65 42 82 39
Next token is token RDBRT ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 5 11 17 23 65 42 82 40
Next token is token RDBRT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 116
Stack now 0 5 11 17 23 65 42 82 116
Next token is token RDBRT ()
Reducing stack by rule 34 (line 115):
   $1 = nterm equality_expression ()
   $2 = token EQUALTO ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 5 11 17 23 65 42
Next token is token RDBRT ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 5 11 17 23 65 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 5 11 17 23 65 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 5 11 17 23 65 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 5 11 17 23 65 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 97
Stack now 0 5 11 17 23 65 97
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 126
Stack now 0 5 11 17 23 65 97 126
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 24
Stack now 0 5 11 17 23 65 97 126 24
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 5 11 17 23 65 97 126 24 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 5 11 17 23 65 97 126 24 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 97 126 24 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 5 11 17 23 65 97 126 24 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 5 11 17 23 65 97 126 24 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 5 11 17 23 65 97 126 24 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 5 11 17 23 65 97 126 24 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 5 11 17 23 65 97 126 24 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 5 11 17 23 65 97 126 24 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 5 11 17 23 65 97 126 24 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 5 11 17 23 65 97 126 24 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 5 11 17 23 65 97 126 24 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 5 11 17 23 65 97 126 24 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 66
Stack now 0 5 11 17 23 65 97 126 24 66
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 98
Stack now 0 5 11 17 23 65 97 126 24 66 98
Reducing stack by rule 82 (line 241):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token SCOLN ()
-> $$ = nterm jump_statement ()
Entering state 59
Stack now 0 5 11 17 23 65 97 126 59
Reducing stack by rule 70 (line 205):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Entering state 135
Stack now 0 5 11 17 23 65 97 126 135
Reading a token
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 139
Stack now 0 5 11 17 23 65 97 126 135 139
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 24
Stack now 0 5 11 17 23 65 97 126 135 139 24
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 5 11 17 23 65 97 126 135 139 24 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 5 11 17 23 65 97 126 135 139 24 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 97 126 135 139 24 36
Reading a token
Next token is token MULT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 5 11 17 23 65 97 126 135 139 24 37
Next token is token MULT ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 5 11 17 23 65 97 126 135 139 24 39
Next token is token MULT ()
Shifting token MULT ()
Entering state 73
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 69
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 36
Reading a token
Next token is token SUB ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 37
Next token is token SUB ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 39
Next token is token SUB ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40
Next token is token SUB ()
Shifting token SUB ()
Entering state 76
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40 76
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40 76 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40 76 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40 76 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40 76 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 110
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40 76 110
Next token is token RDBRT ()
Reducing stack by rule 27 (line 103):
   $1 = nterm additive_expression ()
   $2 = token SUB ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 40
Next token is token RDBRT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 41
Next token is token RDBRT ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 42
Next token is token RDBRT ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 103
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 103
Reducing stack by rule 12 (line 77):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Entering state 102
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 102
Next token is token RDBRT ()
Reducing stack by rule 10 (line 72):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Entering state 101
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 101
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 128
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36 69 101 128
Reducing stack by rule 8 (line 67):
   $1 = nterm postfix_expression ()
   $2 = token RDBLT ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token RDBRT ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 106
Stack now 0 5 11 17 23 65 97 126 135 139 24 39 73 106
Reducing stack by rule 22 (line 95):
   $1 = nterm multiplicative_expression ()
   $2 = token MULT ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 5 11 17 23 65 97 126 135 139 24 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 5 11 17 23 65 97 126 135 139 24 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 5 11 17 23 65 97 126 135 139 24 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 5 11 17 23 65 97 126 135 139 24 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 5 11 17 23 65 97 126 135 139 24 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 5 11 17 23 65 97 126 135 139 24 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 5 11 17 23 65 97 126 135 139 24 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 5 11 17 23 65 97 126 135 139 24 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 5 11 17 23 65 97 126 135 139 24 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 66
Stack now 0 5 11 17 23 65 97 126 135 139 24 66
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 98
Stack now 0 5 11 17 23 65 97 126 135 139 24 66 98
Reducing stack by rule 82 (line 241):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token SCOLN ()
-> $$ = nterm jump_statement ()
Entering state 59
Stack now 0 5 11 17 23 65 97 126 135 139 59
Reducing stack by rule 70 (line 205):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Entering state 141
Stack now 0 5 11 17 23 65 97 126 135 139 141
Reducing stack by rule 80 (line 233):
   $1 = token IF ()
   $2 = token RDBLT ()
   $3 = nterm expression ()
   $4 = token RDBRT ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Entering state 57
Stack now 0 5 11 17 57
Reducing stack by rule 68 (line 203):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Entering state 51
Stack now 0 5 11 17 51
Reducing stack by rule 77 (line 224):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Entering state 55
Stack now 0 5 11 17 55
Reducing stack by rule 72 (line 213):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 5 11 17 53
Reading a token
Next token is token CRBRT ()
Reducing stack by rule 74 (line 218):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Entering state 54
Stack now 0 5 11 17 54
Next token is token CRBRT ()
Shifting token CRBRT ()
Entering state 90
Stack now 0 5 11 17 54 90
Reducing stack by rule 71 (line 209):
   $1 = token CRBLT ()
   $2 = nterm block_item_list_opt ()
   $3 = token CRBRT ()
-> $$ = nterm compound_statement ()
Entering state 19
Stack now 0 5 11 19
Reducing stack by rule 87 (line 255):
   $1 = nterm type_specifier ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Entering state 8
Stack now 0 8
Reducing stack by rule 85 (line 250):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Entering state 7
Stack now 0 7
Reducing stack by rule 83 (line 245):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Entering state 6
Stack now 0 6
Reading a token
Next token is token VOID ()
Shifting token VOID ()
Entering state 3
Stack now 0 6 3
Reducing stack by rule 50 (line 158):
   $1 = token VOID ()
-> $$ = nterm type_specifier ()
Entering state 5
Stack now 0 6 5
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 13 20
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 63
Stack now 0 6 5 13 20 63
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 13 20 63 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 92
Stack now 0 6 5 13 20 63 92
Reading a token
Next token is token MULT ()
Shifting token MULT ()
Entering state 9
Stack now 0 6 5 13 20 63 92 9
Reducing stack by rule 57 (line 174):
   $1 = token MULT ()
-> $$ = nterm pointer ()
Entering state 12
Stack now 0 6 5 13 20 63 92 12
Reducing stack by rule 58 (line 178):
   $1 = nterm pointer ()
-> $$ = nterm pointer_opt ()
Entering state 122
Stack now 0 6 5 13 20 63 92 122
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 131
Stack now 0 6 5 13 20 63 92 122 131
Reducing stack by rule 88 (line 261):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_opt ()
Entering state 132
Stack now 0 6 5 13 20 63 92 122 132
Reducing stack by rule 64 (line 193):
   $1 = nterm type_specifier ()
   $2 = nterm pointer_opt ()
   $3 = nterm identifier_opt ()
-> $$ = nterm parameter_declaration ()
Entering state 95
Stack now 0 6 5 13 20 63 95
Reducing stack by rule 60 (line 183):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Entering state 93
Stack now 0 6 5 13 20 63 93
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 62 (line 188):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_list_opt ()
Entering state 94
Stack now 0 6 5 13 20 63 94
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 124
Stack now 0 6 5 13 20 63 94 124
Reducing stack by rule 56 (line 170):
   $1 = token IDENTIFIER ()
   $2 = token RDBLT ()
   $3 = nterm parameter_list_opt ()
   $4 = token RDBRT ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 11
Stack now 0 6 5 11
Reading a token
Next token is token CRBLT ()
Shifting token CRBLT ()
Entering state 17
Stack now 0 6 5 11 17
Reading a token
Next token is token CHAR ()
Shifting token CHAR ()
Entering state 1
Stack now 0 6 5 11 17 1
Reducing stack by rule 51 (line 159):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 50 13 20
Reading a token
Next token is token SQBLT ()
Shifting token SQBLT ()
Entering state 62
Stack now 0 6 5 11 17 50 13 20 62
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 91
Stack now 0 6 5 11 17 50 13 20 62 91
Reading a token
Next token is token SQBRT ()
Shifting token SQBRT ()
Entering state 121
Stack now 0 6 5 11 17 50 13 20 62 91 121
Reducing stack by rule 55 (line 169):
   $1 = token IDENTIFIER ()
   $2 = token SQBLT ()
   $3 = token INTEGER_CONST ()
   $4 = token SQBRT ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 50 88
Reading a token
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 50 88 18
Reading a token
Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 28
Stack now 0 6 5 11 17 50 88 18 28
Reducing stack by rule 4 (line 60):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 50 88 18 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 50 88 18 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 55
Stack now 0 6 5 11 17 55
Reducing stack by rule 72 (line 213):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 11 17 53 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 53 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 53 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 53 50 13 20
Reading a token
Next token is token ASGN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 53 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 53 50 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 53 50 88 18
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 29
Stack now 0 6 5 11 17 53 50 88 18 29
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 29
Stack now 0 6 5 11 17 53 50 88 18 29 29
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 29
Stack now 0 6 5 11 17 53 50 88 18 29 29 29
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 36
Reading a token
Next token is token ADD ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 37
Next token is token ADD ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 39
Next token is token ADD ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40
Next token is token ADD ()
Shifting token ADD ()
Entering state 77
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40 77
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40 77 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40 77 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40 77 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40 77 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 111
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40 77 111
Next token is token RDBRT ()
Reducing stack by rule 26 (line 102):
   $1 = nterm additive_expression ()
   $2 = token ADD ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 40
Next token is token RDBRT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 41
Next token is token RDBRT ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 42
Next token is token RDBRT ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 67
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 67
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 99
Stack now 0 6 5 11 17 53 50 88 18 29 29 29 67 99
Reducing stack by rule 5 (line 61):
   $1 = token RDBLT ()
   $2 = nterm expression ()
   $3 = token RDBRT ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 29 29 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 29 29 36
Reading a token
Next token is token MULT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 29 29 37
Next token is token MULT ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 29 29 39
Next token is token MULT ()
Shifting token MULT ()
Entering state 73
Stack now 0 6 5 11 17 53 50 88 18 29 29 39 73
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 29 29 39 73 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 29 29 39 73 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 29 29 39 73 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 106
Stack now 0 6 5 11 17 53 50 88 18 29 29 39 73 106
Reducing stack by rule 22 (line 95):
   $1 = nterm multiplicative_expression ()
   $2 = token MULT ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 29 29 39
Next token is token RDBRT ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 29 29 40
Next token is token RDBRT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 29 29 41
Next token is token RDBRT ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 29 29 42
Next token is token RDBRT ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 29 29 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 29 29 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 29 29 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 50 88 18 29 29 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 67
Stack now 0 6 5 11 17 53 50 88 18 29 29 67
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 99
Stack now 0 6 5 11 17 53 50 88 18 29 29 67 99
Reducing stack by rule 5 (line 61):
   $1 = token RDBLT ()
   $2 = nterm expression ()
   $3 = token RDBRT ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 29 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 29 36
Reading a token
Next token is token DIV ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 29 37
Next token is token DIV ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 29 39
Next token is token DIV ()
Shifting token DIV ()
Entering state 74
Stack now 0 6 5 11 17 53 50 88 18 29 39 74
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 29 39 74 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 29 39 74 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 29 39 74 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 107
Stack now 0 6 5 11 17 53 50 88 18 29 39 74 107
Reducing stack by rule 23 (line 96):
   $1 = nterm multiplicative_expression ()
   $2 = token DIV ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 29 39
Next token is token RDBRT ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 29 40
Next token is token RDBRT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 29 41
Next token is token RDBRT ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 29 42
Next token is token RDBRT ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 29 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 29 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 29 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 50 88 18 29 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 67
Stack now 0 6 5 11 17 53 50 88 18 29 67
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 99
Stack now 0 6 5 11 17 53 50 88 18 29 67 99
Reducing stack by rule 5 (line 61):
   $1 = token RDBLT ()
   $2 = nterm expression ()
   $3 = token RDBRT ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 36
Reading a token
Next token is token MOD ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 37
Next token is token MOD ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 39
Next token is token MOD ()
Shifting token MOD ()
Entering state 75
Stack now 0 6 5 11 17 53 50 88 18 39 75
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 39 75 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 39 75 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 39 75 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 108
Stack now 0 6 5 11 17 53 50 88 18 39 75 108
Reducing stack by rule 24 (line 97):
   $1 = nterm multiplicative_expression ()
   $2 = token MOD ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 53 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 53 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 53 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 53 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 53 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token CRBRT ()
Reducing stack by rule 74 (line 218):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Entering state 54
Stack now 0 6 5 11 17 54
Next token is token CRBRT ()
Shifting token CRBRT ()
Entering state 90
Stack now 0 6 5 11 17 54 90
Reducing stack by rule 71 (line 209):
   $1 = token CRBLT ()
   $2 = nterm block_item_list_opt ()
   $3 = token CRBRT ()
-> $$ = nterm compound_statement ()
Entering state 19
Stack now 0 6 5 11 19
Reducing stack by rule 87 (line 255):
   $1 = nterm type_specifier ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Entering state 8
Stack now 0 6 8
Reducing stack by rule 85 (line 250):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Entering state 15
Stack now 0 6 15
Reducing stack by rule 84 (line 246):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Entering state 6
Stack now 0 6
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 5
Stack now 0 6 5
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 13 20
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 63
Stack now 0 6 5 13 20 63
Reading a token
Next token is token CHAR ()
Shifting token CHAR ()
Entering state 1
Stack now 0 6 5 13 20 63 1
Reducing stack by rule 51 (line 159):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Entering state 92
Stack now 0 6 5 13 20 63 92
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 122
Stack now 0 6 5 13 20 63 92 122
Next token is token RDBRT ()
Reducing stack by rule 89 (line 262):
-> $$ = nterm identifier_opt ()
Entering state 132
Stack now 0 6 5 13 20 63 92 122 132
Reducing stack by rule 64 (line 193):
   $1 = nterm type_specifier ()
   $2 = nterm pointer_opt ()
   $3 = nterm identifier_opt ()
-> $$ = nterm parameter_declaration ()
Entering state 95
Stack now 0 6 5 13 20 63 95
Reducing stack by rule 60 (line 183):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Entering state 93
Stack now 0 6 5 13 20 63 93
Next token is token RDBRT ()
Reducing stack by rule 62 (line 188):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_list_opt ()
Entering state 94
Stack now 0 6 5 13 20 63 94
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 124
Stack now 0 6 5 13 20 63 94 124
Reducing stack by rule 56 (line 170):
   $1 = token IDENTIFIER ()
   $2 = token RDBLT ()
   $3 = nterm parameter_list_opt ()
   $4 = token RDBRT ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 11
Stack now 0 6 5 11
Reading a token
Next token is token CRBLT ()
Shifting token CRBLT ()
Entering state 17
Stack now 0 6 5 11 17
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 11 17 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 50 13 20
Reading a token
Next token is token ASGN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 50 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 50 88 18
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 50 88 18 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 50 88 18 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 50 88 18 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 55
Stack now 0 6 5 11 17 55
Reducing stack by rule 72 (line 213):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token CRBRT ()
Reducing stack by rule 74 (line 218):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Entering state 54
Stack now 0 6 5 11 17 54
Next token is token CRBRT ()
Shifting token CRBRT ()
Entering state 90
Stack now 0 6 5 11 17 54 90
Reducing stack by rule 71 (line 209):
   $1 = token CRBLT ()
   $2 = nterm block_item_list_opt ()
   $3 = token CRBRT ()
-> $$ = nterm compound_statement ()
Entering state 19
Stack now 0 6 5 11 19
Reducing stack by rule 87 (line 255):
   $1 = nterm type_specifier ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Entering state 8
Stack now 0 6 8
Reducing stack by rule 85 (line 250):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Entering state 15
Stack now 0 6 15
Reducing stack by rule 84 (line 246):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Entering state 6
Stack now 0 6
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 5
Stack now 0 6 5
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 13 20
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 63
Stack now 0 6 5 13 20 63
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 63 (line 189):
-> $$ = nterm parameter_list_opt ()
Entering state 94
Stack now 0 6 5 13 20 63 94
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 124
Stack now 0 6 5 13 20 63 94 124
Reducing stack by rule 56 (line 170):
   $1 = token IDENTIFIER ()
   $2 = token RDBLT ()
   $3 = nterm parameter_list_opt ()
   $4 = token RDBRT ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 11
Stack now 0 6 5 11
Reading a token
Next token is token CRBLT ()
Shifting token CRBLT ()
Entering state 17
Stack now 0 6 5 11 17
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 11 17 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 50 13 20
Reading a token
Next token is token ASGN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 50 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 50 88 18
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 50 88 18 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 50 88 18 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 50 88 18 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 55
Stack now 0 6 5 11 17 55
Reducing stack by rule 72 (line 213):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 11 17 53 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 53 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 53 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 53 50 13 20
Reading a token
Next token is token ASGN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 53 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 53 50 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 53 50 88 18
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 53 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 53 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 53 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 53 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 53 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 11 17 53 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 53 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 53 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 53 50 13 20
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 53 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 53 50 88
Next token is token SCOLN ()
Reducing stack by rule 48 (line 153):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 53 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 53 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 53 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token CHAR ()
Shifting token CHAR ()
Entering state 1
Stack now 0 6 5 11 17 53 1
Reducing stack by rule 51 (line 159):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 53 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 53 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 53 50 13 20
Reading a token
Next token is token ASGN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 53 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 53 50 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 53 50 88 18
Reading a token
Next token is token CHARACTER_CONST ()
Shifting token CHARACTER_CONST ()
Entering state 27
Stack now 0 6 5 11 17 53 50 88 18 27
Reducing stack by rule 3 (line 59):
   $1 = token CHARACTER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 53 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 53 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 53 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 53 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 53 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token IF ()
Shifting token IF ()
Entering state 23
Stack now 0 6 5 11 17 53 23
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 65
Stack now 0 6 5 11 17 53 23 65
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 36
Reading a token
Next token is token GT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 23 65 37
Next token is token GT ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 23 65 39
Next token is token GT ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 23 65 40
Next token is token GT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 23 65 41
Next token is token GT ()
Shifting token GT ()
Entering state 79
Stack now 0 6 5 11 17 53 23 65 41 79
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 23 65 41 79 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 41 79 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 41 79 36
Reading a token
Next token is token AND ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 23 65 41 79 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 23 65 41 79 39
Next token is token AND ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 113
Stack now 0 6 5 11 17 53 23 65 41 79 113
Next token is token AND ()
Reducing stack by rule 30 (line 108):
   $1 = nterm relational_expression ()
   $2 = token GT ()
   $3 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 23 65 41
Next token is token AND ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 23 65 42
Next token is token AND ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 23 65 43
Next token is token AND ()
Shifting token AND ()
Entering state 84
Stack now 0 6 5 11 17 53 23 65 43 84
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 43 84 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 43 84 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 43 84 36
Reading a token
Next token is token GT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 23 65 43 84 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 23 65 43 84 39
Next token is token GT ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 23 65 43 84 40
Next token is token GT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 23 65 43 84 41
Next token is token GT ()
Shifting token GT ()
Entering state 79
Stack now 0 6 5 11 17 53 23 65 43 84 41 79
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 23 65 43 84 41 79 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 43 84 41 79 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 43 84 41 79 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 23 65 43 84 41 79 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 23 65 43 84 41 79 39
Next token is token RDBRT ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 113
Stack now 0 6 5 11 17 53 23 65 43 84 41 79 113
Next token is token RDBRT ()
Reducing stack by rule 30 (line 108):
   $1 = nterm relational_expression ()
   $2 = token GT ()
   $3 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 23 65 43 84 41
Next token is token RDBRT ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 118
Stack now 0 6 5 11 17 53 23 65 43 84 118
Next token is token RDBRT ()
Reducing stack by rule 37 (line 121):
   $1 = nterm logical_AND_expression ()
   $2 = token AND ()
   $3 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 23 65 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 23 65 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 23 65 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 23 65 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 97
Stack now 0 6 5 11 17 53 23 65 97
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 126
Stack now 0 6 5 11 17 53 23 65 97 126
Reading a token
Next token is token CRBLT ()
Shifting token CRBLT ()
Entering state 17
Stack now 0 6 5 11 17 53 23 65 97 126 17
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 97 126 17 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 97 126 17 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 97 126 17 36
Reading a token
Next token is token ASGN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 23 65 97 126 17 37
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 71
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 36
Reading a token
Next token is token ADD ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 37
Next token is token ADD ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 39
Next token is token ADD ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40
Next token is token ADD ()
Shifting token ADD ()
Entering state 77
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77
Reading a token
Next token is token ADD ()
Shifting token ADD ()
Entering state 31
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 31
Reducing stack by rule 18 (line 88):
   $1 = token ADD ()
-> $$ = nterm unary_operator ()
Entering state 38
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 38
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 38 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 38 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 38 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 72
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 38 72
Reducing stack by rule 15 (line 83):
   $1 = nterm unary_operator ()
   $2 = nterm unary_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 111
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40 77 111
Next token is token SCOLN ()
Reducing stack by rule 26 (line 102):
   $1 = nterm additive_expression ()
   $2 = token ADD ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 105
Stack now 0 6 5 11 17 53 23 65 97 126 17 37 71 105
Reducing stack by rule 43 (line 136):
   $1 = nterm unary_expression ()
   $2 = token ASGN ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 23 65 97 126 17 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 23 65 97 126 17 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 49
Stack now 0 6 5 11 17 53 23 65 97 126 17 49
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 87
Stack now 0 6 5 11 17 53 23 65 97 126 17 49 87
Reducing stack by rule 78 (line 228):
   $1 = nterm expression_opt ()
   $2 = token SCOLN ()
-> $$ = nterm expression_statement ()
Entering state 56
Stack now 0 6 5 11 17 53 23 65 97 126 17 56
Reducing stack by rule 67 (line 202):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Entering state 51
Stack now 0 6 5 11 17 53 23 65 97 126 17 51
Reducing stack by rule 77 (line 224):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Entering state 55
Stack now 0 6 5 11 17 53 23 65 97 126 17 55
Reducing stack by rule 72 (line 213):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53 23 65 97 126 17 53
Reading a token
Next token is token CRBRT ()
Reducing stack by rule 74 (line 218):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Entering state 54
Stack now 0 6 5 11 17 53 23 65 97 126 17 54
Next token is token CRBRT ()
Shifting token CRBRT ()
Entering state 90
Stack now 0 6 5 11 17 53 23 65 97 126 17 54 90
Reducing stack by rule 71 (line 209):
   $1 = token CRBLT ()
   $2 = nterm block_item_list_opt ()
   $3 = token CRBRT ()
-> $$ = nterm compound_statement ()
Entering state 52
Stack now 0 6 5 11 17 53 23 65 97 126 52
Reducing stack by rule 66 (line 201):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Entering state 135
Stack now 0 6 5 11 17 53 23 65 97 126 135
Reading a token
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 139
Stack now 0 6 5 11 17 53 23 65 97 126 135 139
Reading a token
Next token is token CRBLT ()
Shifting token CRBLT ()
Entering state 17
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 36
Reading a token
Next token is token ASGN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 71
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 36
Reading a token
Next token is token ADD ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 37
Next token is token ADD ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 39
Next token is token ADD ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40
Next token is token ADD ()
Shifting token ADD ()
Entering state 77
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40 77
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40 77 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40 77 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40 77 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40 77 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 111
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40 77 111
Next token is token SCOLN ()
Reducing stack by rule 26 (line 102):
   $1 = nterm additive_expression ()
   $2 = token ADD ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 105
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 37 71 105
Reducing stack by rule 43 (line 136):
   $1 = nterm unary_expression ()
   $2 = token ASGN ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 49
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 49
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 87
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 49 87
Reducing stack by rule 78 (line 228):
   $1 = nterm expression_opt ()
   $2 = token SCOLN ()
-> $$ = nterm expression_statement ()
Entering state 56
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 56
Reducing stack by rule 67 (line 202):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Entering state 51
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 51
Reducing stack by rule 77 (line 224):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Entering state 55
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 55
Reducing stack by rule 72 (line 213):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 53
Reading a token
Next token is token CRBRT ()
Reducing stack by rule 74 (line 218):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Entering state 54
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 54
Next token is token CRBRT ()
Shifting token CRBRT ()
Entering state 90
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 17 54 90
Reducing stack by rule 71 (line 209):
   $1 = token CRBLT ()
   $2 = nterm block_item_list_opt ()
   $3 = token CRBRT ()
-> $$ = nterm compound_statement ()
Entering state 52
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 52
Reducing stack by rule 66 (line 201):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Entering state 141
Stack now 0 6 5 11 17 53 23 65 97 126 135 139 141
Reducing stack by rule 80 (line 233):
   $1 = token IF ()
   $2 = token RDBLT ()
   $3 = nterm expression ()
   $4 = token RDBRT ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Entering state 57
Stack now 0 6 5 11 17 53 57
Reducing stack by rule 68 (line 203):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Entering state 51
Stack now 0 6 5 11 17 53 51
Reducing stack by rule 77 (line 224):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 11 17 53 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 53 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 53 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 53 50 13 20
Reading a token
Next token is token ASGN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 53 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 53 50 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 53 50 88 18
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 53 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 53 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 53 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 53 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 53 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token INT ()
Shifting token INT ()
Entering state 2
Stack now 0 6 5 11 17 53 2
Reducing stack by rule 52 (line 160):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Entering state 50
Stack now 0 6 5 11 17 53 50
Reading a token
Next token is token IDENTIFIER ()
Reducing stack by rule 59 (line 179):
-> $$ = nterm pointer_opt ()
Entering state 13
Stack now 0 6 5 11 17 53 50 13
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 20
Stack now 0 6 5 11 17 53 50 13 20
Reading a token
Next token is token ASGN ()
Reducing stack by rule 54 (line 168):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Entering state 21
Stack now 0 6 5 11 17 53 50 13 21
Reducing stack by rule 53 (line 164):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Entering state 88
Stack now 0 6 5 11 17 53 50 88
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 18
Stack now 0 6 5 11 17 53 50 88 18
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 50 88 18 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 50 88 18 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 50 88 18 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 50 88 18 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 50 88 18 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 50 88 18 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 50 88 18 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 50 88 18 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 50 88 18 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 50 88 18 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 50 88 18 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 60
Stack now 0 6 5 11 17 53 50 88 18 60
Reducing stack by rule 65 (line 197):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Entering state 61
Stack now 0 6 5 11 17 53 50 88 18 61
Reducing stack by rule 49 (line 154):
   $1 = nterm declarator ()
   $2 = token ASGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Entering state 10
Stack now 0 6 5 11 17 53 50 10
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 16
Stack now 0 6 5 11 17 53 50 10 16
Reducing stack by rule 45 (line 144):
   $1 = nterm type_specifier ()
   $2 = nterm init_declarator ()
   $3 = token SCOLN ()
-> $$ = nterm declaration ()
Entering state 48
Stack now 0 6 5 11 17 53 48
Reducing stack by rule 76 (line 223):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 36
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 69
Stack now 0 6 5 11 17 53 36 69
Reading a token
Next token is token AMPERSOND ()
Shifting token AMPERSOND ()
Entering state 33
Stack now 0 6 5 11 17 53 36 69 33
Reducing stack by rule 16 (line 86):
   $1 = token AMPERSOND ()
-> $$ = nterm unary_operator ()
Entering state 38
Stack now 0 6 5 11 17 53 36 69 38
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 36 69 38 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 36 69 38 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 36 69 38 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 72
Stack now 0 6 5 11 17 53 36 69 38 72
Reducing stack by rule 15 (line 83):
   $1 = nterm unary_operator ()
   $2 = nterm unary_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 36 69 37
Next token is token RDBRT ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 36 69 39
Next token is token RDBRT ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 36 69 40
Next token is token RDBRT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 36 69 41
Next token is token RDBRT ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 36 69 42
Next token is token RDBRT ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 36 69 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 36 69 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 36 69 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 103
Stack now 0 6 5 11 17 53 36 69 103
Reducing stack by rule 12 (line 77):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Entering state 102
Stack now 0 6 5 11 17 53 36 69 102
Next token is token RDBRT ()
Reducing stack by rule 10 (line 72):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Entering state 101
Stack now 0 6 5 11 17 53 36 69 101
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 128
Stack now 0 6 5 11 17 53 36 69 101 128
Reducing stack by rule 8 (line 67):
   $1 = nterm postfix_expression ()
   $2 = token RDBLT ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token RDBRT ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 49
Stack now 0 6 5 11 17 53 49
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 87
Stack now 0 6 5 11 17 53 49 87
Reducing stack by rule 78 (line 228):
   $1 = nterm expression_opt ()
   $2 = token SCOLN ()
-> $$ = nterm expression_statement ()
Entering state 56
Stack now 0 6 5 11 17 53 56
Reducing stack by rule 67 (line 202):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Entering state 51
Stack now 0 6 5 11 17 53 51
Reducing stack by rule 77 (line 224):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token FOR ()
Shifting token FOR ()
Entering state 22
Stack now 0 6 5 11 17 53 22
Reading a token
Next token is token RDBLT ()
Shifting token RDBLT ()
Entering state 64
Stack now 0 6 5 11 17 53 22 64
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 36
Reading a token
Next token is token ASGN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 22 64 37
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 71
Stack now 0 6 5 11 17 53 22 64 37 71
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 22 64 37 71 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 37 71 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 37 71 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 22 64 37 71 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 22 64 37 71 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 22 64 37 71 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 22 64 37 71 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 22 64 37 71 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 22 64 37 71 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 22 64 37 71 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 22 64 37 71 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 105
Stack now 0 6 5 11 17 53 22 64 37 71 105
Reducing stack by rule 43 (line 136):
   $1 = nterm unary_expression ()
   $2 = token ASGN ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 22 64 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 22 64 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 96
Stack now 0 6 5 11 17 53 22 64 96
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 125
Stack now 0 6 5 11 17 53 22 64 96 125
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 96 125 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 36
Reading a token
Next token is token LTE ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 22 64 96 125 37
Next token is token LTE ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 22 64 96 125 39
Next token is token LTE ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 22 64 96 125 40
Next token is token LTE ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 22 64 96 125 41
Next token is token LTE ()
Shifting token LTE ()
Entering state 80
Stack now 0 6 5 11 17 53 22 64 96 125 41 80
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 96 125 41 80 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 41 80 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 41 80 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 22 64 96 125 41 80 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 22 64 96 125 41 80 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 114
Stack now 0 6 5 11 17 53 22 64 96 125 41 80 114
Next token is token SCOLN ()
Reducing stack by rule 31 (line 109):
   $1 = nterm relational_expression ()
   $2 = token LTE ()
   $3 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 22 64 96 125 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 22 64 96 125 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 22 64 96 125 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 22 64 96 125 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 22 64 96 125 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 22 64 96 125 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 22 64 96 125 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 134
Stack now 0 6 5 11 17 53 22 64 96 125 134
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 138
Stack now 0 6 5 11 17 53 22 64 96 125 134 138
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 36
Reading a token
Next token is token ASGN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 71
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 36
Reading a token
Next token is token ADD ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 37
Next token is token ADD ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 39
Next token is token ADD ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40
Next token is token ADD ()
Shifting token ADD ()
Entering state 77
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40 77
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40 77 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40 77 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40 77 36
Reading a token
Next token is token RDBRT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 109
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40 77 109
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 111
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40 77 111
Next token is token RDBRT ()
Reducing stack by rule 26 (line 102):
   $1 = nterm additive_expression ()
   $2 = token ADD ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 40
Next token is token RDBRT ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 41
Next token is token RDBRT ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 42
Next token is token RDBRT ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 43
Next token is token RDBRT ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 44
Next token is token RDBRT ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 105
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 37 71 105
Reducing stack by rule 43 (line 136):
   $1 = nterm unary_expression ()
   $2 = token ASGN ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 140
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140
Next token is token RDBRT ()
Shifting token RDBRT ()
Entering state 142
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 36
Reading a token
Next token is token ASGN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37
Next token is token ASGN ()
Shifting token ASGN ()
Entering state 71
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 36
Reading a token
Next token is token MULT ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 37
Next token is token MULT ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 39
Next token is token MULT ()
Shifting token MULT ()
Entering state 73
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 39 73
Reading a token
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 25
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 39 73 25
Reducing stack by rule 1 (line 57):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 39 73 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 39 73 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 106
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 39 73 106
Reducing stack by rule 22 (line 95):
   $1 = nterm multiplicative_expression ()
   $2 = token MULT ()
   $3 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 105
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 37 71 105
Reducing stack by rule 43 (line 136):
   $1 = nterm unary_expression ()
   $2 = token ASGN ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 49
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 49
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 87
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 49 87
Reducing stack by rule 78 (line 228):
   $1 = nterm expression_opt ()
   $2 = token SCOLN ()
-> $$ = nterm expression_statement ()
Entering state 56
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 56
Reducing stack by rule 67 (line 202):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Entering state 143
Stack now 0 6 5 11 17 53 22 64 96 125 134 138 140 142 143
Reducing stack by rule 81 (line 237):
   $1 = token FOR ()
   $2 = token RDBLT ()
   $3 = nterm expression_opt ()
   $4 = token SCOLN ()
   $5 = nterm expression_opt ()
   $6 = token SCOLN ()
   $7 = nterm expression_opt ()
   $8 = token RDBRT ()
   $9 = nterm statement ()
-> $$ = nterm iteration_statement ()
Entering state 58
Stack now 0 6 5 11 17 53 58
Reducing stack by rule 69 (line 204):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Entering state 51
Stack now 0 6 5 11 17 53 51
Reducing stack by rule 77 (line 224):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 24
Stack now 0 6 5 11 17 53 24
Reading a token
Next token is token INTEGER_CONST ()
Shifting token INTEGER_CONST ()
Entering state 26
Stack now 0 6 5 11 17 53 24 26
Reducing stack by rule 2 (line 58):
   $1 = token INTEGER_CONST ()
-> $$ = nterm primary_expression ()
Entering state 35
Stack now 0 6 5 11 17 53 24 35
Reducing stack by rule 6 (line 65):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Entering state 36
Stack now 0 6 5 11 17 53 24 36
Reading a token
Next token is token SCOLN ()
Reducing stack by rule 14 (line 82):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Entering state 37
Stack now 0 6 5 11 17 53 24 37
Next token is token SCOLN ()
Reducing stack by rule 21 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Entering state 39
Stack now 0 6 5 11 17 53 24 39
Next token is token SCOLN ()
Reducing stack by rule 25 (line 101):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Entering state 40
Stack now 0 6 5 11 17 53 24 40
Next token is token SCOLN ()
Reducing stack by rule 28 (line 106):
   $1 = nterm additive_expression ()
-> $$ = nterm relational_expression ()
Entering state 41
Stack now 0 6 5 11 17 53 24 41
Next token is token SCOLN ()
Reducing stack by rule 33 (line 114):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Entering state 42
Stack now 0 6 5 11 17 53 24 42
Next token is token SCOLN ()
Reducing stack by rule 36 (line 120):
   $1 = nterm equality_expression ()
-> $$ = nterm logical_AND_expression ()
Entering state 43
Stack now 0 6 5 11 17 53 24 43
Next token is token SCOLN ()
Reducing stack by rule 38 (line 125):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Entering state 44
Stack now 0 6 5 11 17 53 24 44
Next token is token SCOLN ()
Reducing stack by rule 40 (line 130):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Entering state 45
Stack now 0 6 5 11 17 53 24 45
Reducing stack by rule 42 (line 135):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Entering state 46
Stack now 0 6 5 11 17 53 24 46
Reducing stack by rule 44 (line 140):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Entering state 47
Stack now 0 6 5 11 17 53 24 47
Reducing stack by rule 46 (line 148):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Entering state 66
Stack now 0 6 5 11 17 53 24 66
Next token is token SCOLN ()
Shifting token SCOLN ()
Entering state 98
Stack now 0 6 5 11 17 53 24 66 98
Reducing stack by rule 82 (line 241):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token SCOLN ()
-> $$ = nterm jump_statement ()
Entering state 59
Stack now 0 6 5 11 17 53 59
Reducing stack by rule 70 (line 205):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Entering state 51
Stack now 0 6 5 11 17 53 51
Reducing stack by rule 77 (line 224):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Entering state 89
Stack now 0 6 5 11 17 53 89
Reducing stack by rule 73 (line 214):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Entering state 53
Stack now 0 6 5 11 17 53
Reading a token
Next token is token CRBRT ()
Reducing stack by rule 74 (line 218):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Entering state 54
Stack now 0 6 5 11 17 54
Next token is token CRBRT ()
Shifting token CRBRT ()
Entering state 90
Stack now 0 6 5 11 17 54 90
Reducing stack by rule 71 (line 209):
   $1 = token CRBLT ()
   $2 = nterm block_item_list_opt ()
   $3 = token CRBRT ()
-> $$ = nterm compound_statement ()
Entering state 19
Stack now 0 6 5 11 19
Reducing stack by rule 87 (line 255):
   $1 = nterm type_specifier ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Entering state 8
Stack now 0 6 8
Reducing stack by rule 85 (line 250):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Entering state 15
Stack now 0 6 15
Reducing stack by rule 84 (line 246):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Entering state 6
Stack now 0 6
Reading a token
Now at end of input.
Shifting token "end of file" ()
Entering state 14
Stack now 0 6 14
Stack now 0 6 14
Cleanup: popping token "end of file" ()
Cleanup: popping nterm translation_unit ()
