Assingment 4
------------
Group 36
------------

How to run:
unzip the A4_36.tar file
make sure you have make installed
go into terminal into the folder A4_36
give the command:
$make
This will create the A4_36.output file which contains the grammar with all the terminals, non-terminals and productions defined.
We have followed the Flex I/O (interactive) format in the slides for the lexer and we have used the same lexer as we created in assignment3.

To run the test input file, 
give the following command:
$./A4_36 input.nc 2> output.txt

This will give information about whether the code is grammatically/syntactically correct or not in the command prompt.
Also in the output.txt file you can see 
--> the token being read.
--> the status of the stack containing the states. 
--> which rule is used for a particular reduction where the rules are defined in the A4_36.output file which is generated by bison.
--> if error occured then at which rule it occured.
--> the rule number and line number for a particular reduciton.
--> lookahead token.

Note:
In the lexer:
1) We have taken 0 as an Interger Constant.
2) For string literal double quatation(") at the ends are excluded.
3) For character constant (') at the ends are excluded.
In the parser:
4) We are printing the stack states using the yydebug = 1 statement.
5) If the input is grammatically correct than the code will output "Parsing Succesful" else it will print "Some error occured" if the input code is not grammatically correct.
6) We have made the following changes in the given grammar:
    - The given productions for translation_unit was only able to parse a single function_definition where as nanoC can have 
    multiple functions inside a single translation_unit so we have modified nanoC in order to accomodate multiple functions.
    -  In the function_definition's productions the declaration_list_opt was not needed as it is already covered by declarator,
    so we have made changes to the function_definition's rule accordingly.
    